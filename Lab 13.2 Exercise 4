#include <iostream>
using namespace std;

class Circles
{
public:
    void setCenter(int x, int y);
    double findArea();
    double findCircumference();
    void printCircleStats();  // This outputs the radius and center of the circle.
    Circles(float r = 1, int x = 0, int y = 0);  // Constructor with default values
    ~Circles();  // Destructor
private:
    float radius;
    int center_x;
    int center_y;
};

const double PI = 3.14;

int main()
{
    Circles sphere1;  // Default constructor, radius = 1, center = (0, 0)
    sphere1.printCircleStats();
    cout << "The area of the circle is " << sphere1.findArea() << endl;
    cout << "The circumference of the circle is " << sphere1.findCircumference() << endl;

    Circles sphere2(5);  // Radius = 5, center = (0, 0)
    sphere2.printCircleStats();
    cout << "The area of the circle is " << sphere2.findArea() << endl;
    cout << "The circumference of the circle is " << sphere2.findCircumference() << endl;

    Circles sphere3(0, 10, 12);  // Center = (10, 12), radius = 1
    sphere3.printCircleStats();
    cout << "The area of the circle is " << sphere3.findArea() << endl;
    cout << "The circumference of the circle is " << sphere3.findCircumference() << endl;

    Circles sphere4(7, 8, 9);  // Radius = 7, center = (8, 9)
    sphere4.printCircleStats();
    cout << "The area of the circle is " << sphere4.findArea() << endl;
    cout << "The circumference of the circle is " << sphere4.findCircumference() << endl;

    return 0;
}

// Implementation section

Circles::Circles(float r, int x, int y)
{
    radius = r;
    center_x = x;
    center_y = y;
}

double Circles::findArea()
{
    return PI * radius * radius;
}

double Circles::findCircumference()
{
    return 2 * PI * radius;
}

void Circles::printCircleStats()
{
    cout << "The radius of the circle is " << radius << endl;
    cout << "The center of the circle is (" << center_x << ", " << center_y << ")" << endl;
}

void Circles::setCenter(int x, int y)
{
    center_x = x;
    center_y = y;
}

Circles::~Circles()
{
    cout << "This concludes the Circles class." << endl;
}
