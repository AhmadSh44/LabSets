#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

// Function prototypes
void bubbleSort(vector<int>& arr);
int binarySearch(const vector<int>& arr, int target);
double calculateMean(const vector<int>& arr);

int main() {
    int size;
    cout << "Enter the number of elements (max 50): ";
    cin >> size;

    if (size > 50) {
        cout << "Array size cannot exceed 50 elements." << endl;
        return 1;
    }

    vector<int> arr(size);
    cout << "Enter " << size << " elements:" << endl;
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    // Display the original array
    cout << "Original array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Sort the array using bubble sort
    bubbleSort(arr);

    // Display the sorted array
    cout << "Sorted array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Prompt the user for the integer to search for
    int target;
    cout << "Enter the integer to search for: ";
    cin >> target;

    // Perform binary search
    int index = binarySearch(arr, target);
    if (index != -1) {
        cout << "The integer " << target << " is found at index " << index << "." << endl;
    } else {
        cout << "The integer " << target << " is not found in the array." << endl;
    }

    // Calculate and display the mean of the array
    double mean = calculateMean(arr);
    cout << "Mean of the array: " << mean << endl;

    return 0;
}

// Function to perform bubble sort
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to perform binary search
int binarySearch(const vector<int>& arr, int target) {
    int low = 0, high = arr.size() - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == target) {
            return mid; // Target found
        }
        if (arr[mid] < target) {
            low = mid + 1; // Search in the right half
        } else {
            high = mid - 1; // Search in the left half
        }
    }
    return -1; // Target not found
}

// Function to calculate the mean of the array
double calculateMean(const vector<int>& arr) {
    int sum = 0;
    for (int num : arr) {
        sum += num;
    }
    return static_cast<double>(sum) / arr.size();
}

