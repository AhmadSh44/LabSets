#include <iostream>
using namespace std;

class SavingsAccount {
private:
    int dollars;
    int cents;

    // Normalize the cents so that it is always less than 100
    void normalize() {
        if (cents >= 100) {
            dollars += cents / 100;
            cents = cents % 100;
        }
    }

public:
    // Default constructor that initializes both dollars and cents to 0
    SavingsAccount() {
        dollars = 0;
        cents = 0;
    }

    // Constructor with 2 parameters to initialize dollars and cents
    SavingsAccount(int initialDollars, int initialCents) {
        dollars = initialDollars;
        cents = initialCents;
        normalize();
    }

    // 2. Make a deposit
    void deposit(int depositDollars, int depositCents) {
        dollars += depositDollars;
        cents += depositCents;
        normalize();
    }

    // 3. Make a withdrawal
    void withdraw(int withdrawDollars, int withdrawCents) {
        dollars -= withdrawDollars;
        cents -= withdrawCents;
        if (cents < 0) {
            dollars -= 1;
            cents += 100;
        }
        normalize();
    }

    // 4. Show current balance
    void showBalance() const {
        cout << "Balance: $" << dollars << "." << (cents < 10 ? "0" : "") << cents << endl;
    }
};

int main() {
    int initialDollars, initialCents;
    int depositDollars, depositCents;
    int withdrawDollars, withdrawCents;

    // User input for initial deposit for bank1
    cout << "Enter initial deposit for bank1 (dollars and cents): ";
    cin >> initialDollars >> initialCents;

    // Create bank1 with user-defined initial values
    SavingsAccount bank1(initialDollars, initialCents);

    // Create bank2 using the default constructor (initialized to 0)
    SavingsAccount bank2;

    // User input for deposit for bank1
    cout << "Enter deposit amount for bank1 (dollars and cents): ";
    cin >> depositDollars >> depositCents;
    bank1.deposit(depositDollars, depositCents);

    // User input for withdrawal for bank1
    cout << "Enter withdrawal amount for bank1 (dollars and cents): ";
    cin >> withdrawDollars >> withdrawCents;
    bank1.withdraw(withdrawDollars, withdrawCents);

    // User input for deposit for bank2
    cout << "Enter deposit amount for bank2 (dollars and cents): ";
    cin >> depositDollars >> depositCents;
    bank2.deposit(depositDollars, depositCents);

    // User input for withdrawal for bank2
    cout << "Enter withdrawal amount for bank2 (dollars and cents): ";
    cin >> withdrawDollars >> withdrawCents;
    bank2.withdraw(withdrawDollars, withdrawCents);

    // Show final balance for bank1 and bank2
    cout << "\nFinal balance for bank1: ";
    bank1.showBalance();

    cout << "Final balance for bank2: ";
    bank2.showBalance();

    return 0;
}

